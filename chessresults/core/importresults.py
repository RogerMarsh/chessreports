# importresults.py
# Copyright 2008 Roger Marsh
# Licence: See LICENCE (BSD licence)

"""Extract results from ECF submission files or League database.
"""

import collections

from chessvalidate.core import gameresults

from . import constants


def get_event_identifier_from_game(game):
    """Return event identifier from game details."""
    return (
        game[constants._startdate],
        game[constants._enddate],
        game[constants._event],
    )


def get_section_identifier_from_game(game):
    """Return section identifier from game details."""
    return (
        game[constants._startdate],
        game[constants._enddate],
        game[constants._event],
        game[constants._sectionname],
        game[constants._uniquesection],
    )


def get_player_identifier_from_game(game, player, pin):
    """Return player identifier from game details.

    Produces same key as section case in collation.Player.get_player_identity

    """
    return (
        game[player],
        game[constants._event],
        game[constants._startdate],
        game[constants._enddate],
        game[constants._section],
        game[pin],
    )


class ImportResults(object):

    """Class for importing results data."""

    def __init__(self, textlines, filename):

        super(ImportResults, self).__init__()
        self.textlines = textlines
        self.game = dict()
        self.event = dict()
        self.match = dict()

    def translate_results_format(self, context=None, items=None):
        """Extract results into a common format.

        Provide rules in context and items arguments.

        """

        def null(data):
            pass

        if context is None:
            context = dict()
        for c in context:
            if not isinstance(context[c], collections.Callable):
                context[c] = null
        if items is None:
            items = dict()
        data = dict()
        for t in self.get_lines():
            ts = t.split("=", 1)
            key, value = ts[0], ts[-1]
            if key not in items:
                if len(key) != 0:
                    return False
            data[key] = value
            if key in context:
                context[key](data)
                data = dict()
        if len(data):
            return False
        return True

    def get_event_names(self):
        """Return sorted list of event names."""
        names = sorted([e for e in self.event])
        return names

    def get_lines(self):
        """Return self.textlines

        Null get_lines method. Define get_lines method in subclass if
        self.textlines needs transforming before being processed by
        translate_results_format method.

        """
        return self.textlines


class ImportMerges(ImportResults):

    """Import data from file generated by merges.py."""

    def __init__(self, textlines, filename):
        super(ImportMerges, self).__init__(textlines, filename)

    def translate_results_format(self):
        def game(data):
            if (
                data[constants._result] in gameresults.storeresults
            ):  # constants._storeresults:
                gamenumber = len(self.game)
                self.game[gamenumber] = data
                sections = self.event.setdefault(
                    get_event_identifier_from_game(data), set()
                )
                sections.add(data[constants._section])
                uniquesections = self.match.setdefault(
                    get_section_identifier_from_game(data), []
                )
                uniquesections.append(gamenumber)
                for pin, player, affiliation in (
                    (
                        constants._homepin,
                        constants._homeplayer,
                        constants._homeaffiliation,
                    ),
                    (
                        constants._awaypin,
                        constants._awayplayer,
                        constants._awayaffiliation,
                    ),
                ):
                    data[pin] = pinmap.setdefault(data[pin], len(pinmap) + 1)

        pinmap = {}

        context = {
            constants._result: game,
        }

        items = {
            constants._startdate: True,
            constants._enddate: True,
            constants._event: True,
            constants._section: True,
            constants._date: True,
            constants._homeplayerwhite: True,
            constants._homeplayer: True,
            constants._awayplayer: True,
            constants._homepin: True,
            constants._awaypin: True,
            constants._homeaffiliation: True,
            constants._awayaffiliation: True,
            constants._sectionname: True,
            constants._uniquesection: True,
            constants._result: True,
            constants._hometeam: False,
            constants._awayteam: False,
            constants._board: False,
            constants._round: False,
        }

        return super(ImportMerges, self).translate_results_format(
            context=context, items=items
        )

    def get_lines(self):
        """Delimiter is newline sequence."""
        return [t.strip() for t in self.textlines]


def get_import_event_results(data, filename):
    """Extract results from data and return extracted results."""
    for Format in (ImportMerges,):
        importdata = Format(data, filename)
        if importdata.translate_results_format():
            return importdata
